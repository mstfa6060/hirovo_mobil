/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from 'hirovo-config'; 
import { ApiService } from '../../../../services';

// Custom Types 
type Guid = string; 
type Double = number;

// Settings...

export namespace FileProviderAPI {

	export namespace Enums {

		export enum BucketTypes {
			SingleFileBucket = 0,
			MultipleFileBucket = 1,
		}

	}

	export namespace Files {

		export namespace Upload {
			export const RequestPath = AppConfig.FileProviderUrl + '/Files/Upload';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				formFile: __ERROR_TYPE_NOT_HANDLED__;
				moduleName: string;
				bucketId: string;
				bucketType: Enums.BucketTypes;
				changeId?: Guid;
				entityId?: Guid;
				folderName: string;
				versionName: string;
				tenantId?: Guid;
			}
			export interface IResponseModel {
				changeId: Guid;
				bucketId: string;
				bucketType: Enums.BucketTypes;
				moduleName: string;
				files: IFileResponse[];
			}
			export interface IFileResponse {
				id: Guid;
				extention: string;
				name: string;
				path: string;
				contentType: string;
				isDefault: boolean;
				index: number;
			}
		}

		export namespace UploadToApprovedBucket {
			export const RequestPath = AppConfig.FileProviderUrl + '/Files/UploadToApprovedBucket';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				formFile: __ERROR_TYPE_NOT_HANDLED__;
				moduleName: string;
				bucketId: string;
				bucketType: Enums.BucketTypes;
				changeId?: Guid;
				entityId?: Guid;
				folderName: string;
				versionName: string;
			}
			export interface IResponseModel {
				changeId: Guid;
				bucketId: string;
				bucketType: Enums.BucketTypes;
				moduleName: string;
				files: IFileResponse[];
			}
			export interface IFileResponse {
				id: Guid;
				extention: string;
				name: string;
				path: string;
				contentType: string;
				isDefault: boolean;
				index: number;
			}
		}

		export namespace UploadEyp {
			export const RequestPath = AppConfig.FileProviderUrl + '/Files/UploadEyp';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				formFile: __ERROR_TYPE_NOT_HANDLED__;
				entityId: Guid;
				companyId: Guid;
				fileExtention: string;
			}
			export interface IResponseModel {
				entityId: Guid;
				extention: string;
				name: string;
				path: string;
				contentType: string;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.FileProviderUrl + '/Files/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				bucketId: string;
				fileId: Guid;
				changeId?: Guid;
			}
			export interface IResponseModel {
				bucketId: string;
				fileId: Guid;
				changeId: Guid;
			}
		}

	}

	export namespace Buckets {

		export namespace Detail {
			export const RequestPath = AppConfig.FileProviderUrl + '/Buckets/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				bucketId: string;
				changeId: Guid;
			}
			export interface IResponseModel {
				bucketId: string;
				changeId: Guid;
				files: IFileResponse[];
			}
			export interface IFileResponse {
				id: Guid;
				extention: string;
				name: string;
				path: string;
				securePath: string;
				contentType: string;
				isDefault: boolean;
				index: number;
			}
		}

		export namespace Duplicate {
			export const RequestPath = AppConfig.FileProviderUrl + '/Buckets/Duplicate';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				bucketId: string;
				changeId: Guid;
				entityId?: Guid;
				folderName: string;
				versionName: string;
			}
			export interface IResponseModel {
				changeId: Guid;
				bucketId: string;
				bucketType: Enums.BucketTypes;
			}
		}

		export namespace Copy {
			export const RequestPath = AppConfig.FileProviderUrl + '/Buckets/Copy';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				bucketId: string;
				changeId: Guid;
				entityId?: Guid;
				folderName: string;
				versionName: string;
			}
			export interface IResponseModel {
				changeId: Guid;
				bucketId: string;
				bucketType: Enums.BucketTypes;
				files: IFileResponse[];
			}
			export interface IFileResponse {
				id: Guid;
				extention: string;
				name: string;
				path: string;
				securePath: string;
				contentType: string;
				isDefault: boolean;
				index: number;
			}
		}

	}

}