/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from 'hirovo-config'; 
import { ApiService } from '../../../../services';

// Custom Types 
type Guid = string; 
type Double = number;

// Settings...

export namespace HirovoAPI {

	export namespace Enums {

		export enum XSortingDirection {
			Ascending = 0,
			Descending = 1,
		}

		export enum HirovoJobType {
			FullTime = 0,
			PartTime = 1,
			Freelance = 2,
		}

		export enum HirovoJobStatus {
			Active = 0,
			Closed = 1,
			Filled = 2,
		}

		export enum SubscriptionPlan {
			Free = 0,
			Trial = 1,
			Standard = 2,
			Corporate = 3,
		}

		export enum ApplicationStatus {
			Pending = 0,
			Accepted = 1,
			Rejected = 2,
			Cancelled = 3,
		}

	}

	export namespace Workers {

		export namespace Pick {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				selectedIds: Guid[];
				keyword: string;
				limit: number;
			}
			export interface IResponseModel {
				id: Guid;
				fullName: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				description: string;
				phoneNumber: string;
				birthDate?: Date;
				city: string;
				district: string;
				isAvailable: boolean;
				fullName: string;
				bucketId: string;
				coverPictureUrl: string;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				phoneNumber: string;
				birthDate?: Date;
				city: string;
				district: string;
				isAvailable?: boolean;
				displayName: string;
				description: string;
				bucketId: string;
			}
		}

		export namespace UpdateProfile {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/UpdateProfile';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				description: string;
				bucketId: string;
				phoneNumber: string;
				birthDate: Date;
				city: string;
				district: string;
				isAvailable?: boolean;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace SetExpoPushToken {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/SetExpoPushToken';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				expoPushToken: string;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.HirovoUrl + '/Workers/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				isDeleted: boolean;
			}
		}

	}

	export namespace DetailProfile {

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/DetailProfile/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				phoneNumber: string;
				city: string;
				district: string;
				description: string;
				birthDate: Date;
				isAvailable: boolean;
				bucketId: string;
			}
		}

	}

	export namespace AllProfile {

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/AllProfile/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				phoneNumber: string;
				city: string;
				district: string;
				description: string;
				birthDate: Date;
				isAvailable: boolean;
				title: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				createdAt: Date;
			}
		}

	}

	export namespace UpdateProfile {

		export namespace Update {
			export const RequestPath = AppConfig.HirovoUrl + '/UpdateProfile/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				phoneNumber: string;
				city: string;
				district: string;
				description: string;
				birthDate: Date;
				isAvailable: boolean;
				bucketId: string;
			}
			export interface IResponseModel {
				userId: Guid;
			}
		}

	}

	export namespace DeleteProfile {

		export namespace Delete {
			export const RequestPath = AppConfig.HirovoUrl + '/DeleteProfile/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				isDeleted: boolean;
			}
		}

	}

	export namespace Roles {

		export namespace UIDC {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/UIDC';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				commands: IUidcCommands;
			}
			export interface IUidcCommands {
				edit: boolean;
				delete: boolean;
				unDelete: boolean;
			}
		}

		export namespace Pick {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				selectedIds: Guid[];
				keyword: string;
				limit: number;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				isDeleted: boolean;
				createdAt: Date;
				updatedAt?: Date;
				deletedAt?: Date;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				isDeleted: boolean;
			}
		}

		export namespace Update {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				name: string;
				companyId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				isDeleted: boolean;
				companyId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/Roles/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				name: string;
				companyId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

	}

	export namespace Resources {

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Resources/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				roleId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				isUsing: boolean;
			}
		}

	}

	export namespace RelUserRoles {

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/RelUserRoles/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				roleIds: Guid[];
				userId: Guid;
				companyId: Guid;
			}
			export interface IResponseModel {
				isEverythingOk: boolean;
			}
		}

	}

	export namespace RelRoleResources {

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/RelRoleResources/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				resoruceIds: Guid[];
				roleId: Guid;
			}
			export interface IResponseModel {
				isEverythingOk: boolean;
			}
		}

	}

	export namespace Subscriptions {

		export namespace GetPlanDetail {
			export const RequestPath = AppConfig.HirovoUrl + '/Subscriptions/GetPlanDetail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
			}
			export interface IResponseModel {
				hasActivePlan: boolean;
				plan?: Enums.SubscriptionPlan;
				startDate?: Date;
				endDate?: Date;
				daysLeft?: number;
			}
		}

		export namespace UpgradePlan {
			export const RequestPath = AppConfig.HirovoUrl + '/Subscriptions/UpgradePlan';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				newPlan: Enums.SubscriptionPlan;
			}
			export interface IResponseModel {
				userId: Guid;
				upgradedTo: string;
				startedAt: Date;
				expiresAt: Date;
			}
		}

		export namespace StartTrial {
			export const RequestPath = AppConfig.HirovoUrl + '/Subscriptions/StartTrial';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
			}
			export interface IResponseModel {
				userId: Guid;
				startedAt: Date;
				expiresAt: Date;
				planType: string;
			}
		}

	}

	export namespace Skills {

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Skills/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/Skills/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				name: string;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

	}

	export namespace Location {

		export namespace GetNearbyWorkers {
			export const RequestPath = AppConfig.HirovoUrl + '/Location/GetNearbyWorkers';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				companyId: Guid;
				latitude: Double;
				longitude: Double;
				limit: number;
			}
			export interface IResponseModel {
				userId: Guid;
				fullName: string;
				distanceInKm: Double;
			}
		}

		export namespace GetNearbyJobs {
			export const RequestPath = AppConfig.HirovoUrl + '/Location/GetNearbyJobs';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				latitude: Double;
				longitude: Double;
				companyId: Guid;
				limit: number;
			}
			export interface IResponseModel {
				jobId: Guid;
				title: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				distanceInKm: Double;
				endDate: Date;
			}
		}

		export namespace SetLocation {
			export const RequestPath = AppConfig.HirovoUrl + '/Location/SetLocation';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				userId: Guid;
				latitude: Double;
				longitude: Double;
				companyId: Guid;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

	}

	export namespace Jobs {

		export namespace Pick {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				selectedIds: Guid[];
				keyword: string;
				limit: number;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				employerId: Guid;
				employerDisplayName: string;
				latitude: Double;
				longitude: Double;
				notifyRadiusKm: Double;
				endDate: Date;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				endDate: Date;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				hirovoEmployer_Id: Guid;
				application: number;
			}
		}

		export namespace Update {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobId: Guid;
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				latitude: Double;
				longitude: Double;
				notifyRadiusKm: Double;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobId: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				isDeleted: boolean;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/Jobs/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				employerId: Guid;
				latitude: Double;
				longitude: Double;
				notifyRadiusKm: Double;
				companyId: Guid;
				skillIds: Guid[];
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

	}

	export namespace JobApplications {

		export namespace Pick {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				selectedIds: Guid[];
				keyword: string;
				limit: number;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobApplicationId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				status: Enums.ApplicationStatus;
				appliedAt: Date;
				job: IJobInfo;
				worker: IWorkerInfo;
			}
			export interface IJobInfo {
				id: Guid;
				title: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				endDate: Date;
			}
			export interface IWorkerInfo {
				id: Guid;
				fullName: string;
				phoneNumber: string;
				city: string;
				district: string;
			}
		}

		export namespace AppliedJobs {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/AppliedJobs';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				workerId: Guid;
			}
			export interface IResponseModel {
				jobId: Guid;
				title: string;
				description: string;
				salary: __ERROR_TYPE_NOT_HANDLED__;
				type: Enums.HirovoJobType;
				status: Enums.HirovoJobStatus;
				appliedAt: Date;
				endDate: Date;
				applicationStatus: Enums.ApplicationStatus;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				jobId: Guid;
				workerId: Guid;
				status: Enums.ApplicationStatus;
				appliedAt: Date;
				endDate: Date;
				jobTitle: string;
				phoneNumber: string;
				birthDate?: Date;
				city: string;
				district: string;
				isAvailable?: boolean;
				displayName: string;
				description: string;
				bucketId: string;
			}
		}

		export namespace Update {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobApplicationId: Guid;
				jobId: Guid;
				workerId: Guid;
				appliedAt?: Date;
				companyId: Guid;
			}
			export interface IResponseModel {
				jobApplicationId: Guid;
			}
		}

		export namespace UpdateStatus {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/UpdateStatus';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobApplicationId: Guid;
				status: Enums.ApplicationStatus;
			}
			export interface IResponseModel {
				jobApplicationId: Guid;
				status: string;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobApplicationId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				isDeleted: boolean;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.HirovoUrl + '/JobApplications/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				jobId: Guid;
				workerId: Guid;
				companyId: Guid;
			}
			export interface IResponseModel {
				jobApplicationId: Guid;
			}
		}

	}

	export namespace Documents {

		export namespace CheckAccessCode {
			export const RequestPath = AppConfig.HirovoUrl + '/Documents/CheckAccessCode';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				documentId: Guid;
				fileAccessCode: Guid;
				companyId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				isEverthingOk: boolean;
			}
		}

	}

}